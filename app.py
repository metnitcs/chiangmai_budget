import os
import io
import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
from datetime import datetime, date

st.set_page_config(page_title="‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á ‡∏≠‡∏ö‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", layout="wide")

st.title("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á ‡∏≠‡∏ö‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà (2558‚Äì2568)")
st.caption("‡∏≠‡∏±‡∏õ‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ (‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®, ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô, ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤, ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á)")

# -------------------- Helpers --------------------
TH_MONTHS = {
    "‡∏°.‡∏Ñ.": 1, "‡∏Å.‡∏û.": 2, "‡∏°‡∏µ.‡∏Ñ.": 3, "‡πÄ‡∏°.‡∏¢.": 4, "‡∏û.‡∏Ñ.": 5, "‡∏°‡∏¥.‡∏¢.": 6,
    "‡∏Å.‡∏Ñ.": 7, "‡∏™.‡∏Ñ.": 8, "‡∏Å.‡∏¢.": 9, "‡∏ï.‡∏Ñ.": 10, "‡∏û.‡∏¢.": 11, "‡∏ò.‡∏Ñ.": 12,
    # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°": 1, "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå": 2, "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°": 3, "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô": 4, "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°": 5, "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô": 6,
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°": 7, "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°": 8, "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô": 9, "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°": 10, "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô": 11, "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°": 12,
}

def parse_thai_date(s):
    """‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô '13 ‡∏û.‡∏¢. 57' ‡∏´‡∏£‡∏∑‡∏≠ '2568-08-01 00:00:00' ‚Üí datetime.date
       ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤: ‡∏õ‡∏µ‡πÑ‡∏ó‡∏¢‡∏°‡∏±‡∏Å‡∏¢‡πà‡∏≠ (57‚Üí2557). ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏õ‡∏µ < 2500 ‡∏à‡∏∞ +2500 ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö 543 ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®."""
    if pd.isna(s):
        return pd.NaT
    if isinstance(s, (pd.Timestamp, datetime, date)):
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô date
        return pd.to_datetime(s, errors='coerce').date()
    ss = str(s).strip()
    # ‡∏•‡∏≠‡∏á parse ‡πÄ‡∏õ‡πá‡∏ô iso-like ‡∏Å‡πà‡∏≠‡∏ô
    try:
        dt = pd.to_datetime(ss, errors='raise')
        return dt.date()
    except Exception:
        pass
    parts = ss.replace(",", " ").split()
    # ‡∏Ñ‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: DD <th_month> YY/YYY[Y]
    try:
        if len(parts) >= 3:
            d = int(parts[0])
            mname = parts[1]
            y_text = parts[2]
            m = TH_MONTHS.get(mname, None)
            if m is None:
                return pd.NaT
            y = int(y_text)
            if y < 2500:  # ‡∏õ‡∏µ‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
                y = y + 2500
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
            y_g = y - 543
            return date(y_g, m, d)
    except Exception:
        return pd.NaT
    return pd.NaT

def clean_numeric(x):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"""
    if pd.isna(x):
        return np.nan
    if isinstance(x, (int, float, np.number)):
        return float(x)
    s = str(x).replace(",", "").replace(" ", "")
    try:
        return float(s)
    except Exception:
        return np.nan

# -------------------- Sidebar --------------------
with st.sidebar:
    st.header("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤/‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
    uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ Excel (.xlsx)", type=["xlsx"])
    use_sample = st.checkbox("‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ", value=not bool(uploaded), help="‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    st.markdown("---")
    st.caption("‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß")

# -------------------- Load Data --------------------
df = None
source_note = ""

if use_sample and not uploaded:
    sample_path = "/mnt/data/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà2558-2568.xlsx"
    try:
        xls = pd.ExcelFile(sample_path)
        df = pd.read_excel(xls, sheet_name=xls.sheet_names[0])
        source_note = "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {e}")
        st.stop()
else:
    if not uploaded:
        st.stop()
    try:
        xls = pd.ExcelFile(uploaded)
        df = pd.read_excel(xls, sheet_name=xls.sheet_names[0])
        source_note = "‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"
    except Exception as e:
        st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()

st.success(f"üìÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({source_note}) ‚Ä¢ ‡πÅ‡∏ñ‡∏ß: {len(df):,} ‚Ä¢ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {len(df.columns)}")

# -------------------- Column Mapping --------------------
# ‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
# ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å selectbox
default_cols = {
    "date": "announce_date",
    "dept": "dept_name",
    "type": "project_type_name",
    "value": "contract_price_agree",  # ‡πÉ‡∏ä‡πâ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤
    "vendor": "winner_name",
}
st.markdown("### üîß ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
c1, c2, c3, c4, c5 = st.columns(5)
date_col = c1.selectbox("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", df.columns.tolist(), index=df.columns.get_loc(default_cols["date"]) if default_cols["date"] in df.columns else 0)
dept_col = c2.selectbox("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô", df.columns.tolist(), index=df.columns.get_loc(default_cols["dept"]) if default_cols["dept"] in df.columns else 0)
type_col = c3.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô", df.columns.tolist(), index=df.columns.get_loc(default_cols["type"]) if default_cols["type"] in df.columns else 0)
value_col = c4.selectbox("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ (‡∏ö‡∏≤‡∏ó)", df.columns.tolist(), index=df.columns.get_loc(default_cols["value"]) if default_cols["value"] in df.columns else 0)
vendor_col = c5.selectbox("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á/‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", df.columns.tolist(), index=df.columns.get_loc(default_cols["vendor"]) if default_cols["vendor"] in df.columns else 0)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏Ñ.‡∏®.
dt_series = df[date_col].apply(parse_thai_date)
df["_date"] = pd.to_datetime(dt_series, errors="coerce")
# ‡∏ó‡∏≥‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ß‡∏•‡∏≤
df["_year"] = df["_date"].dt.year
df["_month"] = df["_date"].dt.to_period("M").dt.to_timestamp()
df["_day"] = df["_date"].dt.date

# ‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
df["_value"] = df[value_col].apply(clean_numeric)

# -------------------- Filters --------------------
st.markdown("### üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á (Filters)")
fc1, fc2, fc3 = st.columns(3)
# ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô
min_d = df["_date"].min(); max_d = df["_date"].max()
if pd.isna(min_d) or pd.isna(max_d):
    st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà parse ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)")
    st.stop()
date_range = fc1.date_input("‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=(min_d.date(), max_d.date()))
if isinstance(date_range, tuple):
    d_from, d_to = date_range
else:
    d_from, d_to = min_d.date(), max_d.date()

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô/‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
dept_vals = sorted([x for x in df[dept_col].dropna().unique().tolist() if str(x).strip() != ""])
type_vals = sorted([x for x in df[type_col].dropna().unique().tolist() if str(x).strip() != ""])
dept_sel = fc2.multiselect("‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô", dept_vals, default=dept_vals[: min(20, len(dept_vals))])
type_sel = fc3.multiselect("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô", type_vals, default=type_vals or [])

# Apply filters
f = df.copy()
f = f[(f["_date"].dt.date >= d_from) & (f["_date"].dt.date <= d_to)]
if dept_sel:
    f = f[f[dept_col].isin(dept_sel)]
if type_sel:
    f = f[f[type_col].isin(type_sel)]

# -------------------- KPIs --------------------
st.markdown("### üìå ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î (KPIs)")
k1, k2, k3, k4 = st.columns(4)
k1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"{len(f):,}")
k2.metric("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)", f"{f['_value'].sum():,.2f}")
k3.metric("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", f"{f['_value'].mean():,.2f}")
k4.metric("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ß‡∏±‡∏ô", f"{(f.groupby('_day')['_value'].sum().mean() if not f.empty else 0):,.2f}")

st.markdown("---")

# -------------------- Charts --------------------
co1, co2 = st.columns(2)

# 1) ‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°)
m = f.dropna(subset=["_month"]).groupby("_month")["_value"].sum().reset_index()
m["_month"] = pd.to_datetime(m["_month"])
fig_line = px.line(m, x="_month", y="_value", title="‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
co1.plotly_chart(fig_line, use_container_width=True)

# 2) ‡πÅ‡∏ó‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô (Top N)
dept_agg = f.groupby(dept_col)["_value"].sum().reset_index().sort_values("_value", ascending=False)
topn = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á (Top-N)", 5, 30, 10, 1)
dept_top = dept_agg.head(topn)
fig_bar = px.bar(dept_top, x=dept_col, y="_value", title=f"‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô (Top {topn})")
co2.plotly_chart(fig_bar, use_container_width=True)

# 3) Pie: % ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
type_agg = f.groupby(type_col)["_value"].sum().reset_index()
if len(type_agg) > 0:
    fig_pie_type = px.pie(type_agg, names=type_col, values="_value", title="% ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô")
    st.plotly_chart(fig_pie_type, use_container_width=True)

# 4) Pie: % ‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á (Top-N)
vendor_agg = f.groupby(vendor_col)["_value"].sum().reset_index().sort_values("_value", ascending=False)
vendor_top = vendor_agg.head(topn)
if len(vendor_top) > 0:
    fig_pie_vendor = px.pie(vendor_top, names=vendor_col, values="_value", title=f"% ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á (Top {topn})")
    st.plotly_chart(fig_pie_vendor, use_container_width=True)

st.markdown("---")

# -------------------- Summary Tables with % Share --------------------
st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô (%)")

# ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
dept_tbl = f.groupby(dept_col).agg(
    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô=("project_id", "count"),
    ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°=("_value", "sum")
).reset_index().sort_values("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°", ascending=False)
total_val = dept_tbl["‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°"].sum() or 1.0
dept_tbl["% ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤"] = (dept_tbl["‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°"] / total_val * 100).round(2)

# ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
type_tbl = f.groupby(type_col).agg(
    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô=("project_id", "count"),
    ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°=("_value", "sum")
).reset_index().sort_values("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°", ascending=False)
total_val_t = type_tbl["‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°"].sum() or 1.0
type_tbl["% ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤"] = (type_tbl["‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°"] / total_val_t * 100).round(2)

t1, t2 = st.columns(2)
with t1:
    st.markdown("**‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô**")
    st.dataframe(dept_tbl, use_container_width=True)
with t2:
    st.markdown("**‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô**")
    st.dataframe(type_tbl, use_container_width=True)

with st.expander("üßæ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1,000 ‡πÅ‡∏ñ‡∏ß)"):
    st.dataframe(f.head(1000), use_container_width=True)

st.caption("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Streamlit ‚Ä¢ Plotly ‚Ä¢ Pandas ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏Ñ.‡∏®. ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")