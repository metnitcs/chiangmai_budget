import os
import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
from datetime import datetime, date
from pathlib import Path

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ", layout="wide")

# BRIGHT THEME
BASE_CSS = """
<style>
:root { --primary: #ff6b35; --secondary: #f7931e; --accent: #00d4aa; --purple: #8b5cf6; }

/* Force light background */
.stApp, .main .block-container, [data-testid="stAppViewContainer"] {
  background-color: #ffffff !important;
  color: #1f2937 !important;
}

.block-container { padding-top: 0.5rem; }
.hero {
  background: linear-gradient(135deg, var(--primary), var(--secondary), var(--accent));
  color: white; padding: 24px; border-radius: 20px; box-shadow: 0 12px 32px rgba(255,107,53,.2);
}
.hero h1 { margin: 0; font-size: 1.8rem; font-weight: 800; }
.hero p { margin: 8px 0 0; opacity: .95; font-size: 1.05rem; }

.kpi { 
  background: linear-gradient(145deg, #ffffff, #f8fafc); 
  border-radius: 20px; padding: 20px; 
  border: 2px solid #e0f2fe; 
  box-shadow: 0 8px 25px rgba(0,212,170,.1);
  transition: transform 0.2s ease;
}
.kpi:hover { transform: translateY(-2px); }
.kpi .label { color: #475569; font-size: .95rem; font-weight: 600; }
.kpi .value { color: var(--primary); font-weight: 800; font-size: 1.4rem; }

/* Override Streamlit components */
.stSelectbox > div > div, .stDateInput > div > div {
  background-color: #ffffff !important;
  color: #1f2937 !important;
}

.stTabs [data-baseweb="tab-list"] { gap: .5rem; }
.stTabs [data-baseweb="tab"] { 
  border-radius: 25px; 
  background: linear-gradient(145deg, #f1f5f9, #e2e8f0) !important;
  border: 2px solid transparent;
  font-weight: 600;
  color: #1f2937 !important;
}
.stTabs [data-baseweb="tab"]:hover { 
  background: linear-gradient(145deg, var(--accent), var(--purple)) !important;
  color: white !important;
}
</style>
"""
st.markdown(BASE_CSS, unsafe_allow_html=True)

st.markdown("""
<div class="hero">
  <h1>‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</h1>
  <p>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á ¬∑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì/‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô</p>
</div>
""", unsafe_allow_html=True)

# HELPERS
DATA_PATH = Path(__file__).with_name("data.xlsx")
TH_MONTHS = {
    "‡∏°.‡∏Ñ.":1,"‡∏Å.‡∏û.":2,"‡∏°‡∏µ.‡∏Ñ.":3,"‡πÄ‡∏°.‡∏¢.":4,"‡∏û.‡∏Ñ.":5,"‡∏°‡∏¥.‡∏¢.":6,
    "‡∏Å.‡∏Ñ.":7,"‡∏™.‡∏Ñ.":8,"‡∏Å.‡∏¢.":9,"‡∏ï.‡∏Ñ.":10,"‡∏û.‡∏¢.":11,"‡∏ò.‡∏Ñ.":12,
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°":1,"‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå":2,"‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°":3,"‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô":4,"‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°":5,"‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô":6,
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°":7,"‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°":8,"‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô":9,"‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°":10,"‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô":11,"‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°":12
}
def parse_thai_date(s):
    if pd.isna(s): return pd.NaT
    if isinstance(s, (pd.Timestamp, datetime, date)): return pd.to_datetime(s, errors="coerce")
    ss = str(s).strip()
    dt = pd.to_datetime(ss, errors="coerce")
    if pd.notna(dt): return dt
    parts = ss.replace(",", " ").split()
    try:
        if len(parts) >= 3:
            d = int(parts[0]); m = TH_MONTHS.get(parts[1], None); y = int(parts[2])
            if m is None: return pd.NaT
            if y < 2500: y = y + 2500
            y_ce = y - 543
            return pd.to_datetime(f"{y_ce:04d}-{m:02d}-{d:02d}", errors="coerce")
    except Exception:
        return pd.NaT
    return pd.NaT

def clean_num(x):
    if pd.isna(x): return np.nan
    if isinstance(x, (int, float, np.number)): return float(x)
    try: return float(str(x).replace(",", "").replace(" ", ""))
    except: return np.nan

def to_be(ce): return ce + 543

# LOAD FIXED FILE
try:
    xls = pd.ExcelFile(DATA_PATH)
    df = pd.read_excel(xls, sheet_name=xls.sheet_names[0])
    st.success(f"üìÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‚Ä¢ ‡πÅ‡∏ñ‡∏ß {len(df):,} ‚Ä¢ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {len(df.columns)}")
except Exception as e:
    st.error(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

default_cols = {
    "date": "transaction_date",
    "type": "project_type_name",
    "value": "contract_price_agree",
    "vendor": "winner_name",
    "money": "project_money",
}
c1, c2, c3, c4, c5 = st.columns(5)
date_col = c1.selectbox("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á)", df.columns.tolist(),
                        index=df.columns.get_loc(default_cols["date"]) if default_cols["date"] in df.columns else 0)
type_col = c2.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô", df.columns.tolist(),
                        index=df.columns.get_loc(default_cols["type"]) if default_cols["type"] in df.columns else 0)
value_col = c3.selectbox("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤", df.columns.tolist(),
                         index=df.columns.get_loc(default_cols["value"]) if default_cols["value"] in df.columns else 0)
vendor_col = c4.selectbox("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á", df.columns.tolist(),
                          index=df.columns.get_loc(default_cols["vendor"]) if default_cols["vendor"] in df.columns else 0)
money_col = c5.selectbox("‡∏á‡∏ö/‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡πà‡∏≠‡∏õ‡∏µ)", df.columns.tolist(),
                         index=df.columns.get_loc(default_cols["money"]) if default_cols["money"] in df.columns else 0)

df["_date"] = pd.to_datetime(df[date_col].apply(parse_thai_date), errors="coerce")
df["_value"] = df[value_col].apply(clean_num)
df["_money"] = df[money_col].apply(clean_num)
df["_year_ce"] = df["_date"].dt.year
df["_month"] = df["_date"].dt.month
if df["_date"].notna().sum() == 0:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà parse ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

# YEAR FIRST ‚Üí DATE FILTER
st.markdown("### üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì/‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô")
fy_toggle = st.toggle("‡πÉ‡∏ä‡πâ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÑ‡∏ó‡∏¢ (‡∏ï.‡∏Ñ. ‡∏õ‡∏µ‡∏Å‡πà‡∏≠‡∏ô ‚Üí ‡∏Å.‡∏¢. ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)", value=True)

if fy_toggle:
    df["_year_be"] = np.where(df["_month"] >= 10, to_be(df["_year_ce"] + 1), to_be(df["_year_ce"]))
else:
    df["_year_be"] = to_be(df["_year_ce"])

years = sorted(df["_year_be"].dropna().unique().tolist())
sel_year = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ (‡∏û.‡∏®.)", years, index=len(years)-1)

today = pd.Timestamp.today().date()
if fy_toggle:
    y_ce = sel_year - 543
    start = date(y_ce-1, 10, 1)
    end = date(y_ce, 9, 30)
else:
    y_ce = sel_year - 543
    start = date(y_ce, 1, 1)
    end = min(today, date(y_ce, 12, 31))

cda, cdb = st.columns(2)
date_from = cda.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°", value=start)
date_to = cdb.date_input("‡∏ß‡∏±‡∏ô‡∏à‡∏ö", value=end)

f = df[(df["_year_be"] == sel_year)]
f = f[(f["_date"].dt.date >= date_from) & (f["_date"].dt.date <= date_to)]

# KPI
k1, k2, k3, k4 = st.columns(4)
k1.markdown(f'<div class="kpi"><div class="label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div><div class="value">{len(f):,}</div></div>', unsafe_allow_html=True)
k2.markdown(f'<div class="kpi"><div class="label">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏° (‡∏ö.)</div><div class="value">{f["_value"].sum():,.2f}</div></div>', unsafe_allow_html=True)
k3.markdown(f'<div class="kpi"><div class="label">‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)</div><div class="value">{f[vendor_col].nunique():,}</div></div>', unsafe_allow_html=True)
monthly_sum = f.groupby(f["_date"].dt.to_period("M"))["_value"].sum()
k4.markdown(f'<div class="kpi"><div class="label">‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ö.)</div><div class="value">{(monthly_sum.mean() if len(monthly_sum)>0 else 0):,.2f}</div></div>', unsafe_allow_html=True)

st.markdown("---")

# TABS
tab1, tab2, tab3, tab4, tab5 = st.tabs(["‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°", "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô", "‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡πà‡∏≠‡∏õ‡∏µ", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö"])

with tab1:
    c1, c2 = st.columns(2)
    m = f.copy()
    m["ym"] = m["_date"].dt.to_period("M").dt.to_timestamp()
    m = m.groupby("ym")["_value"].sum().reset_index()
    fig_line = px.line(m, x="ym", y="_value", markers=True, title="‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    c1.plotly_chart(fig_line, use_container_width=True)

    type_agg = f.groupby(type_col)["_value"].sum().reset_index()
    if len(type_agg) > 0:
        fig_pie = px.pie(type_agg, names=type_col, values="_value", hole=0.5, title="% ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô")
        c2.plotly_chart(fig_pie, use_container_width=True)

with tab2:
    topn = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á (Top-N)", 5, 30, 10, 1, key="topn_vendor")
    vendor_agg = f.groupby(vendor_col)["_value"].sum().reset_index().sort_values("_value", ascending=False).head(topn)
    fig_bar = px.bar(vendor_agg, x=vendor_col, y="_value", title=f"‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á (Top {topn})")
    st.plotly_chart(fig_bar, use_container_width=True)

with tab3:
    # Count by project_id if available, else by row index
    count_col = "project_id" if "project_id" in f.columns else None
    if count_col is None:
        f = f.reset_index()
        count_col = "index"
    type_tbl = f.groupby(type_col).agg(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô=(count_col,"count"), ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°=("_value","sum")).reset_index().sort_values("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°", ascending=False)
    tot = type_tbl["‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°"].sum() or 1.0
    type_tbl["% ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á"] = (type_tbl["‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°"]/tot*100).round(2)
    st.dataframe(type_tbl, use_container_width=True)

with tab4:
    money_year = f.groupby(df["_year_be"])["_money"].sum().reset_index()
    money_year.columns = ["‡∏õ‡∏µ (‡∏û.‡∏®.)", "‡∏£‡∏ß‡∏° project_money"]
    st.dataframe(money_year.sort_values("‡∏õ‡∏µ (‡∏û.‡∏®.)"), use_container_width=True)

with tab5:
    st.dataframe(f.head(1000), use_container_width=True)
    csv = f.to_csv(index=False).encode("utf-8-sig")
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV", data=csv, file_name="filtered.csv", mime="text/csv")
